# Load Libraries
library(shiny)
library(tidyverse)
library(tm)
library(SnowballC)
library(syuzhet)
library(cluster)
library(igraph)
library(ggplot2)
# Load Data
data <- read.csv("/Users/jyotirmoyee/Downloads/imdb_top_1000.csv", stringsAsFactors = FALSE)
data <- data %>% select(-Poster_Link)

# Convert Released_Year to numeric
data$Released_Year <- as.numeric(data$Released_Year)

# Feature Extraction
feature_extraction <- function(data) {
  data$Genre <- as.factor(data$Genre)
  data$genre_encoded <- as.numeric(data$Genre)
  return(data)
}

# Sentiment Analysis
sentiment_analysis <- function(reviews) {
  sentiment_scores <- get_sentiment(reviews, method = "afinn")
  if (length(sentiment_scores) != nrow(data)) {
    sentiment_scores <- rep(mean(sentiment_scores, na.rm = TRUE), nrow(data))
  }
  return(sentiment_scores)
}

# K-Means Clustering
perform_clustering <- function(data, k = 5) {
  set.seed(123)
  clustering <- kmeans(data[, c("genre_encoded", "sentiment_score")], centers = k, nstart = 25)
  data$cluster <- clustering$cluster
  return(data)
}

# Ranking System
rank_movies <- function(data, genre, actor, director, rating, year_range) {
  data$sentiment_score <- scale(data$sentiment_score, center = TRUE, scale = TRUE)
  data$popularity_score <- scale(data$No_of_Votes, center = TRUE, scale = TRUE)
  
  # Adjusted hybrid score
  data$final_score <- (0.5 * data$IMDB_Rating) + (0.3 * data$popularity_score) + (0.2 * data$sentiment_score)
  
  # Filtering based on user input
  filtered_data <- data %>%
    filter(IMDB_Rating >= rating,
           Released_Year >= year_range[1] & Released_Year <= year_range[2]) 
  
  if (genre != "All Genres") {
    filtered_data <- filtered_data %>% filter(Genre == genre)
  }
  
  if (actor != "All") {
    filtered_data <- filtered_data %>% filter(grepl(actor, Star1) | grepl(actor, Star2) | grepl(actor, Star3) | grepl(actor, Star4))
  }
  
  if (director != "All") {
    filtered_data <- filtered_data %>% filter(Director == director)
  }
  
  return(filtered_data %>% arrange(desc(final_score)))
}

# Evaluation Metrics
precision <- function(recommended, relevant) {
  return(length(intersect(recommended, relevant)) / length(recommended))
}


accuracy <- function(recommended, relevant) {
  correct_predictions <- length(intersect(recommended, relevant))
  return(correct_predictions / length(recommended))
}

# Function to Plot Clusters
plot_clusters <- function(data) {
  ggplot(data, aes(x = genre_encoded, y = sentiment_score, color = factor(cluster))) +
    geom_point(size = 3) +
    labs(title = "Movie Clusters Based on Genre & Sentiment Score",
         x = "Genre (Encoded)", y = "Sentiment Score") +
    theme_minimal()
}

# Function to Plot Rankings
plot_rankings <- function(data) {
  top_movies <- data %>% head(20)
  ggplot(top_movies, aes(x = reorder(Series_Title, final_score), y = final_score)) +
    geom_bar(stat = "identity", fill = "blue") +
    coord_flip() +
    labs(title = "Top 10 Recommended Movies", x = "Movies", y = "Final Score") +
    theme_minimal()
}

# UI
ui <- fluidPage(
  titlePanel("Movie Recommendation System"),
  sidebarLayout(
    sidebarPanel(
      selectInput("genre", "Choose a Genre:", choices = c("All Genres", unique(data$Genre))),
      selectInput("actor", "Choose an Actor:", choices = c("All", unique(c(data$Star1, data$Star2, data$Star3, data$Star4)))),
      selectInput("director", "Choose a Director:", choices = c("All", unique(data$Director))),
      sliderInput("rating", "Minimum IMDB Rating:", min = 1, max = 10, value = 7, step = 0.1),
      sliderInput("year_range", "Select Year Range:", 
                  min = min(data$Released_Year, na.rm = TRUE), 
                  max = max(data$Released_Year, na.rm = TRUE), 
                  value = c(2000, 2023), step = 1),
      actionButton("recommend", "Get Recommendations")
    ),
    mainPanel(
      tableOutput("recommendations"),
      plotOutput("ranking_plot"),
      plotOutput("cluster_plot"),
      textOutput("evaluation_metrics")
    )
  )
)

# Server
server <- function(input, output, session) {
  evaluation_results <- reactiveVal("No recommendations yet.")
  
  recommendations <- eventReactive(input$recommend, {
    processed_data <- feature_extraction(data)
    processed_data$sentiment_score <- sentiment_analysis(processed_data$Overview)
    clustered_data <- perform_clustering(processed_data)
    
    ranked_movies <- rank_movies(clustered_data, input$genre, input$actor, input$director, input$rating, input$year_range)
    
    recommended <- ranked_movies %>% head(10) %>% pull(Series_Title)  # Top 10 recommended movies
    relevant <- data %>% filter(Genre == input$genre | input$genre == "All Genres") %>% 
      arrange(desc(IMDB_Rating)) %>% head(50) %>% pull(Series_Title)  # Top 50 best movies
    
    prec <- precision(recommended, relevant)
    acc <- accuracy(recommended, relevant)
    
    evaluation_results(paste(
      "Precision:", round(prec, 3),
      "| Accuracy:", round(acc, 3)
    ))
    
    return(ranked_movies %>% head(10))
  })
  
  output$recommendations <- renderTable({
    recommendations()
  })
  
  output$ranking_plot <- renderPlot({
    ranked_data <- recommendations()
    if (nrow(ranked_data) > 0) {
      plot_rankings(ranked_data)
    }
  })
  
  output$cluster_plot <- renderPlot({
    processed_data <- feature_extraction(data)
    processed_data$sentiment_score <- sentiment_analysis(processed_data$Overview)
    clustered_data <- perform_clustering(processed_data)
    plot_clusters(clustered_data)
  })
  
  output$evaluation_metrics <- renderText({
    evaluation_results()
  })
}

shinyApp(ui, server)
